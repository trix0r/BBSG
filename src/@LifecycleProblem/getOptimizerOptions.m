function options = getOptimizerOptions(self, state, discreteState, t)

% ensure backwards compatibility with previous code
params = cell(3, 1);
fields = {'tolCon', 'tolFun', 'maxIter'};
for i = 1:numel(fields)
    if isa(self.Optimizer.(fields{i}), 'function_handle')
        params{i} = self.Optimizer.(fields{i})(state, discreteState, t);
    else
        params{i} = self.Optimizer.(fields{i});
    end
end

switch lower(self.Optimizer.routine)
    case 'fmincon'       
        opts ={'fmincon', ...
            'Algorithm', 'active-set', ...
            'TolFun', params{2}, ...
            'MaxIter', params{3}, ...
            'MaxFunEvals', 1000 * self.numberOfPolicies, ...
            'RelLineSrchBnd', 0.1, ...
            'GradObj', boolToStr(self.Optimizer.useGradients), ...
            'Display', determineFminconDisplay(self.Optimizer.printLevel)};
        [~, d] = version;
        % introduced in 2016a
        if datetime(d) > datetime('01-Jan-2016')
            additionalOpts = {'CheckGradients', ...
                              self.Optimizer.checkGradients,...
                              'ConstraintTolerance', params{1}, ...
                              'SpecifyConstraintGradient', true};
        % before
        else
            additionalOpts = {'DerivativeCheck', ...
                              boolToStr(self.Optimizer.checkGradients),...
                              'TolCon', params{1}, ...
                              'GradConstr', 'on'};
        end
        options = optimoptions(opts{:}, additionalOpts{:});
    case 'patternsearch'
        options = psoptimset(...
            'MaxFunEvals', 2000 * self.numberOfPolicies, ...
            'MaxIter', params{3}, ...
            'TolFun', params{2}, ...
            'Display', determineFminconDisplay(self.Optimizer.printLevel)); %#ok<PSOPT>
    case 'npsol'
        % x04ab(nag_int(0), nag_int(1))) = 6 is stdout
        options = ...
          {true, ... % set to false to issue nag err as matlab err
           sprintf('Print Level = %i', self.Optimizer.printLevel), ...
           sprintf('Monitoring File = %i', x04ab(nag_int(0), nag_int(1))), ...
           sprintf('Verify Level = %i', ...
                   2 * self.Optimizer.checkGradients - 1), ...
           sprintf('Derivative Level = %i', ...
                   3 * self.Optimizer.useGradients), ...
           sprintf('Line Search Tolerance = %g', 0.1), ...
           sprintf('Feasibility Tolerance = %g', params{1}), ...
           sprintf('Optimality Tolerance = %g', params{2}), ...
           sprintf('Major Iteration Limit = %i', params{3}),...
           sprintf('Minor Iteration Limit = %i', params{3})};
    case 'snopt'
        % x04ab(nag_int(0), nag_int(1))) = 6 is stdout
        options = ...
          {true, ... % set to false to issue nag err as matlab err
           sprintf('Print Level = %i', self.Optimizer.printLevel), ...
           sprintf('Monitoring File = %i', x04ab(nag_int(0), nag_int(1))), ...
           sprintf('Verify Level = %i', ...
                   2 * self.Optimizer.checkGradients - 1), ...
           sprintf('Derivative Level = %i', ...
                   3 * self.Optimizer.useGradients), ...
           sprintf('Line Search Tolerance = %g', 0.1), ...
           sprintf('Feasibility Tolerance = %g', params{1}), ...
           sprintf('Optimality Tolerance = %g', params{2}), ...
           sprintf('Major Iteration Limit = %i', params{3}),...
           sprintf('Minor Iteration Limit = %i', params{3})};
end

end

function str = boolToStr(boolVal)
if boolVal; str = 'on'; else; str = 'off'; end
end

function str = determineFminconDisplay(printLevel)
if printLevel >= 10
    str = 'iter-detailed';
elseif printLevel >= 5
    str = 'final-detailed';
elseif printLevel > 0
    str = 'notify-detailed';
else
    str = 'off';
end
end
